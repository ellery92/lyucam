# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_genicam')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_genicam')
    _genicam = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_genicam', [dirname(__file__)])
        except ImportError:
            import _genicam
            return _genicam
        try:
            _mod = imp.load_module('_genicam', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _genicam = swig_import_helper()
    del swig_import_helper
else:
    import _genicam
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _genicam.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _genicam.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _genicam.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _genicam.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _genicam.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _genicam.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _genicam.SwigPyIterator_equal(self, x)

    def copy(self):
        return _genicam.SwigPyIterator_copy(self)

    def next(self):
        return _genicam.SwigPyIterator_next(self)

    def __next__(self):
        return _genicam.SwigPyIterator___next__(self)

    def previous(self):
        return _genicam.SwigPyIterator_previous(self)

    def advance(self, n):
        return _genicam.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _genicam.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _genicam.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _genicam.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _genicam.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _genicam.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _genicam.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _genicam.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class GSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSystemVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _genicam.GSystemVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _genicam.GSystemVector___nonzero__(self)

    def __bool__(self):
        return _genicam.GSystemVector___bool__(self)

    def __len__(self):
        return _genicam.GSystemVector___len__(self)

    def __getslice__(self, i, j):
        return _genicam.GSystemVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _genicam.GSystemVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _genicam.GSystemVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _genicam.GSystemVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _genicam.GSystemVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _genicam.GSystemVector___setitem__(self, *args)

    def pop(self):
        return _genicam.GSystemVector_pop(self)

    def append(self, x):
        return _genicam.GSystemVector_append(self, x)

    def empty(self):
        return _genicam.GSystemVector_empty(self)

    def size(self):
        return _genicam.GSystemVector_size(self)

    def swap(self, v):
        return _genicam.GSystemVector_swap(self, v)

    def begin(self):
        return _genicam.GSystemVector_begin(self)

    def end(self):
        return _genicam.GSystemVector_end(self)

    def rbegin(self):
        return _genicam.GSystemVector_rbegin(self)

    def rend(self):
        return _genicam.GSystemVector_rend(self)

    def clear(self):
        return _genicam.GSystemVector_clear(self)

    def get_allocator(self):
        return _genicam.GSystemVector_get_allocator(self)

    def pop_back(self):
        return _genicam.GSystemVector_pop_back(self)

    def erase(self, *args):
        return _genicam.GSystemVector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_GSystemVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _genicam.GSystemVector_push_back(self, x)

    def front(self):
        return _genicam.GSystemVector_front(self)

    def back(self):
        return _genicam.GSystemVector_back(self)

    def assign(self, n, x):
        return _genicam.GSystemVector_assign(self, n, x)

    def resize(self, *args):
        return _genicam.GSystemVector_resize(self, *args)

    def insert(self, *args):
        return _genicam.GSystemVector_insert(self, *args)

    def reserve(self, n):
        return _genicam.GSystemVector_reserve(self, n)

    def capacity(self):
        return _genicam.GSystemVector_capacity(self)
    __swig_destroy__ = _genicam.delete_GSystemVector
    __del__ = lambda self: None
GSystemVector_swigregister = _genicam.GSystemVector_swigregister
GSystemVector_swigregister(GSystemVector)

class GInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GInterfaceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _genicam.GInterfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _genicam.GInterfaceVector___nonzero__(self)

    def __bool__(self):
        return _genicam.GInterfaceVector___bool__(self)

    def __len__(self):
        return _genicam.GInterfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _genicam.GInterfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _genicam.GInterfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _genicam.GInterfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _genicam.GInterfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _genicam.GInterfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _genicam.GInterfaceVector___setitem__(self, *args)

    def pop(self):
        return _genicam.GInterfaceVector_pop(self)

    def append(self, x):
        return _genicam.GInterfaceVector_append(self, x)

    def empty(self):
        return _genicam.GInterfaceVector_empty(self)

    def size(self):
        return _genicam.GInterfaceVector_size(self)

    def swap(self, v):
        return _genicam.GInterfaceVector_swap(self, v)

    def begin(self):
        return _genicam.GInterfaceVector_begin(self)

    def end(self):
        return _genicam.GInterfaceVector_end(self)

    def rbegin(self):
        return _genicam.GInterfaceVector_rbegin(self)

    def rend(self):
        return _genicam.GInterfaceVector_rend(self)

    def clear(self):
        return _genicam.GInterfaceVector_clear(self)

    def get_allocator(self):
        return _genicam.GInterfaceVector_get_allocator(self)

    def pop_back(self):
        return _genicam.GInterfaceVector_pop_back(self)

    def erase(self, *args):
        return _genicam.GInterfaceVector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_GInterfaceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _genicam.GInterfaceVector_push_back(self, x)

    def front(self):
        return _genicam.GInterfaceVector_front(self)

    def back(self):
        return _genicam.GInterfaceVector_back(self)

    def assign(self, n, x):
        return _genicam.GInterfaceVector_assign(self, n, x)

    def resize(self, *args):
        return _genicam.GInterfaceVector_resize(self, *args)

    def insert(self, *args):
        return _genicam.GInterfaceVector_insert(self, *args)

    def reserve(self, n):
        return _genicam.GInterfaceVector_reserve(self, n)

    def capacity(self):
        return _genicam.GInterfaceVector_capacity(self)
    __swig_destroy__ = _genicam.delete_GInterfaceVector
    __del__ = lambda self: None
GInterfaceVector_swigregister = _genicam.GInterfaceVector_swigregister
GInterfaceVector_swigregister(GInterfaceVector)

class GDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GDeviceVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _genicam.GDeviceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _genicam.GDeviceVector___nonzero__(self)

    def __bool__(self):
        return _genicam.GDeviceVector___bool__(self)

    def __len__(self):
        return _genicam.GDeviceVector___len__(self)

    def __getslice__(self, i, j):
        return _genicam.GDeviceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _genicam.GDeviceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _genicam.GDeviceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _genicam.GDeviceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _genicam.GDeviceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _genicam.GDeviceVector___setitem__(self, *args)

    def pop(self):
        return _genicam.GDeviceVector_pop(self)

    def append(self, x):
        return _genicam.GDeviceVector_append(self, x)

    def empty(self):
        return _genicam.GDeviceVector_empty(self)

    def size(self):
        return _genicam.GDeviceVector_size(self)

    def swap(self, v):
        return _genicam.GDeviceVector_swap(self, v)

    def begin(self):
        return _genicam.GDeviceVector_begin(self)

    def end(self):
        return _genicam.GDeviceVector_end(self)

    def rbegin(self):
        return _genicam.GDeviceVector_rbegin(self)

    def rend(self):
        return _genicam.GDeviceVector_rend(self)

    def clear(self):
        return _genicam.GDeviceVector_clear(self)

    def get_allocator(self):
        return _genicam.GDeviceVector_get_allocator(self)

    def pop_back(self):
        return _genicam.GDeviceVector_pop_back(self)

    def erase(self, *args):
        return _genicam.GDeviceVector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_GDeviceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _genicam.GDeviceVector_push_back(self, x)

    def front(self):
        return _genicam.GDeviceVector_front(self)

    def back(self):
        return _genicam.GDeviceVector_back(self)

    def assign(self, n, x):
        return _genicam.GDeviceVector_assign(self, n, x)

    def resize(self, *args):
        return _genicam.GDeviceVector_resize(self, *args)

    def insert(self, *args):
        return _genicam.GDeviceVector_insert(self, *args)

    def reserve(self, n):
        return _genicam.GDeviceVector_reserve(self, n)

    def capacity(self):
        return _genicam.GDeviceVector_capacity(self)
    __swig_destroy__ = _genicam.delete_GDeviceVector
    __del__ = lambda self: None
GDeviceVector_swigregister = _genicam.GDeviceVector_swigregister
GDeviceVector_swigregister(GDeviceVector)

class GStreamVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GStreamVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GStreamVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _genicam.GStreamVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _genicam.GStreamVector___nonzero__(self)

    def __bool__(self):
        return _genicam.GStreamVector___bool__(self)

    def __len__(self):
        return _genicam.GStreamVector___len__(self)

    def __getslice__(self, i, j):
        return _genicam.GStreamVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _genicam.GStreamVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _genicam.GStreamVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _genicam.GStreamVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _genicam.GStreamVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _genicam.GStreamVector___setitem__(self, *args)

    def pop(self):
        return _genicam.GStreamVector_pop(self)

    def append(self, x):
        return _genicam.GStreamVector_append(self, x)

    def empty(self):
        return _genicam.GStreamVector_empty(self)

    def size(self):
        return _genicam.GStreamVector_size(self)

    def swap(self, v):
        return _genicam.GStreamVector_swap(self, v)

    def begin(self):
        return _genicam.GStreamVector_begin(self)

    def end(self):
        return _genicam.GStreamVector_end(self)

    def rbegin(self):
        return _genicam.GStreamVector_rbegin(self)

    def rend(self):
        return _genicam.GStreamVector_rend(self)

    def clear(self):
        return _genicam.GStreamVector_clear(self)

    def get_allocator(self):
        return _genicam.GStreamVector_get_allocator(self)

    def pop_back(self):
        return _genicam.GStreamVector_pop_back(self)

    def erase(self, *args):
        return _genicam.GStreamVector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_GStreamVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _genicam.GStreamVector_push_back(self, x)

    def front(self):
        return _genicam.GStreamVector_front(self)

    def back(self):
        return _genicam.GStreamVector_back(self)

    def assign(self, n, x):
        return _genicam.GStreamVector_assign(self, n, x)

    def resize(self, *args):
        return _genicam.GStreamVector_resize(self, *args)

    def insert(self, *args):
        return _genicam.GStreamVector_insert(self, *args)

    def reserve(self, n):
        return _genicam.GStreamVector_reserve(self, n)

    def capacity(self):
        return _genicam.GStreamVector_capacity(self)
    __swig_destroy__ = _genicam.delete_GStreamVector
    __del__ = lambda self: None
GStreamVector_swigregister = _genicam.GStreamVector_swigregister
GStreamVector_swigregister(GStreamVector)

class GBufferVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GBufferVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GBufferVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _genicam.GBufferVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _genicam.GBufferVector___nonzero__(self)

    def __bool__(self):
        return _genicam.GBufferVector___bool__(self)

    def __len__(self):
        return _genicam.GBufferVector___len__(self)

    def __getslice__(self, i, j):
        return _genicam.GBufferVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _genicam.GBufferVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _genicam.GBufferVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _genicam.GBufferVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _genicam.GBufferVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _genicam.GBufferVector___setitem__(self, *args)

    def pop(self):
        return _genicam.GBufferVector_pop(self)

    def append(self, x):
        return _genicam.GBufferVector_append(self, x)

    def empty(self):
        return _genicam.GBufferVector_empty(self)

    def size(self):
        return _genicam.GBufferVector_size(self)

    def swap(self, v):
        return _genicam.GBufferVector_swap(self, v)

    def begin(self):
        return _genicam.GBufferVector_begin(self)

    def end(self):
        return _genicam.GBufferVector_end(self)

    def rbegin(self):
        return _genicam.GBufferVector_rbegin(self)

    def rend(self):
        return _genicam.GBufferVector_rend(self)

    def clear(self):
        return _genicam.GBufferVector_clear(self)

    def get_allocator(self):
        return _genicam.GBufferVector_get_allocator(self)

    def pop_back(self):
        return _genicam.GBufferVector_pop_back(self)

    def erase(self, *args):
        return _genicam.GBufferVector_erase(self, *args)

    def __init__(self, *args):
        this = _genicam.new_GBufferVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _genicam.GBufferVector_push_back(self, x)

    def front(self):
        return _genicam.GBufferVector_front(self)

    def back(self):
        return _genicam.GBufferVector_back(self)

    def assign(self, n, x):
        return _genicam.GBufferVector_assign(self, n, x)

    def resize(self, *args):
        return _genicam.GBufferVector_resize(self, *args)

    def insert(self, *args):
        return _genicam.GBufferVector_insert(self, *args)

    def reserve(self, n):
        return _genicam.GBufferVector_reserve(self, n)

    def capacity(self):
        return _genicam.GBufferVector_capacity(self)
    __swig_destroy__ = _genicam.delete_GBufferVector
    __del__ = lambda self: None
GBufferVector_swigregister = _genicam.GBufferVector_swigregister
GBufferVector_swigregister(GBufferVector)

class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr

    def __init__(self, _filename):
        this = _genicam.new_System(_filename)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _genicam.delete_System
    __del__ = lambda self: None
    if _newclass:
        addCtiFile = staticmethod(_genicam.System_addCtiFile)
    else:
        addCtiFile = _genicam.System_addCtiFile
    if _newclass:
        removeCtiFile = staticmethod(_genicam.System_removeCtiFile)
    else:
        removeCtiFile = _genicam.System_removeCtiFile
    if _newclass:
        getSystems = staticmethod(_genicam.System_getSystems)
    else:
        getSystems = _genicam.System_getSystems
    if _newclass:
        clearSystems = staticmethod(_genicam.System_clearSystems)
    else:
        clearSystems = _genicam.System_clearSystems

    def getFilename(self):
        return _genicam.System_getFilename(self)

    def open(self):
        return _genicam.System_open(self)

    def close(self):
        return _genicam.System_close(self)

    def getInterfaces(self):
        return _genicam.System_getInterfaces(self)

    def getID(self):
        return _genicam.System_getID(self)

    def getVendor(self):
        return _genicam.System_getVendor(self)

    def getModel(self):
        return _genicam.System_getModel(self)

    def getVersion(self):
        return _genicam.System_getVersion(self)

    def getTLType(self):
        return _genicam.System_getTLType(self)

    def getPathname(self):
        return _genicam.System_getPathname(self)

    def isCharEncodingASCII(self):
        return _genicam.System_isCharEncodingASCII(self)

    def getMajorVersion(self):
        return _genicam.System_getMajorVersion(self)

    def getMinorVersion(self):
        return _genicam.System_getMinorVersion(self)

    def getNodeMap(self):
        return _genicam.System_getNodeMap(self)

    def getHandle(self):
        return _genicam.System_getHandle(self)
System_swigregister = _genicam.System_swigregister
System_swigregister(System)

def System_addCtiFile(filename):
    return _genicam.System_addCtiFile(filename)
System_addCtiFile = _genicam.System_addCtiFile

def System_removeCtiFile(filename):
    return _genicam.System_removeCtiFile(filename)
System_removeCtiFile = _genicam.System_removeCtiFile

def System_getSystems():
    return _genicam.System_getSystems()
System_getSystems = _genicam.System_getSystems

def System_clearSystems():
    return _genicam.System_clearSystems()
System_clearSystems = _genicam.System_clearSystems

class Interface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface, name)
    __repr__ = _swig_repr

    def __init__(self, parent, gentl, id):
        this = _genicam.new_Interface(parent, gentl, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _genicam.delete_Interface
    __del__ = lambda self: None

    def getParent(self):
        return _genicam.Interface_getParent(self)

    def getID(self):
        return _genicam.Interface_getID(self)

    def open(self):
        return _genicam.Interface_open(self)

    def close(self):
        return _genicam.Interface_close(self)

    def getDevices(self):
        return _genicam.Interface_getDevices(self)

    def getDevice(self, devid):
        return _genicam.Interface_getDevice(self, devid)

    def getDisplayName(self):
        return _genicam.Interface_getDisplayName(self)

    def getTLType(self):
        return _genicam.Interface_getTLType(self)

    def getNodeMap(self):
        return _genicam.Interface_getNodeMap(self)

    def getHandle(self):
        return _genicam.Interface_getHandle(self)
Interface_swigregister = _genicam.Interface_swigregister
Interface_swigregister(Interface)

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    READONLY = _genicam.Device_READONLY
    CONTROL = _genicam.Device_CONTROL
    EXCLUSIVE = _genicam.Device_EXCLUSIVE

    def __init__(self, parent, gentl, id):
        this = _genicam.new_Device(parent, gentl, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _genicam.delete_Device
    __del__ = lambda self: None

    def getParent(self):
        return _genicam.Device_getParent(self)

    def getID(self):
        return _genicam.Device_getID(self)

    def open(self, access):
        return _genicam.Device_open(self, access)

    def close(self):
        return _genicam.Device_close(self)

    def getStreams(self):
        return _genicam.Device_getStreams(self)

    def getVendor(self):
        return _genicam.Device_getVendor(self)

    def getModel(self):
        return _genicam.Device_getModel(self)

    def getTLType(self):
        return _genicam.Device_getTLType(self)

    def getDisplayName(self):
        return _genicam.Device_getDisplayName(self)

    def getAccessStatus(self):
        return _genicam.Device_getAccessStatus(self)

    def getUserDefinedName(self):
        return _genicam.Device_getUserDefinedName(self)

    def getSerialNumber(self):
        return _genicam.Device_getSerialNumber(self)

    def getVersion(self):
        return _genicam.Device_getVersion(self)

    def getTimestampFrequency(self):
        return _genicam.Device_getTimestampFrequency(self)

    def getNodeMap(self):
        return _genicam.Device_getNodeMap(self)

    def getRemoteNodeMap(self, xml=None):
        return _genicam.Device_getRemoteNodeMap(self, xml)

    def getHandle(self):
        return _genicam.Device_getHandle(self)
Device_swigregister = _genicam.Device_swigregister
Device_swigregister(Device)


def getDevices():
    return _genicam.getDevices()
getDevices = _genicam.getDevices

def getDevice(devid):
    return _genicam.getDevice(devid)
getDevice = _genicam.getDevice
class Stream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr

    def __init__(self, parent, gentl, id):
        this = _genicam.new_Stream(parent, gentl, id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _genicam.delete_Stream
    __del__ = lambda self: None

    def getParent(self):
        return _genicam.Stream_getParent(self)

    def getID(self):
        return _genicam.Stream_getID(self)

    def open(self):
        return _genicam.Stream_open(self)

    def close(self):
        return _genicam.Stream_close(self)

    def startStreaming(self, na=-1):
        return _genicam.Stream_startStreaming(self, na)

    def stopStreaming(self):
        return _genicam.Stream_stopStreaming(self)

    def grab(self, timeout=-1):
        return _genicam.Stream_grab(self, timeout)

    def getNumDelivered(self):
        return _genicam.Stream_getNumDelivered(self)

    def getNumUnderrun(self):
        return _genicam.Stream_getNumUnderrun(self)

    def getNumAnnounced(self):
        return _genicam.Stream_getNumAnnounced(self)

    def getNumQueued(self):
        return _genicam.Stream_getNumQueued(self)

    def getNumAwaitDelivery(self):
        return _genicam.Stream_getNumAwaitDelivery(self)

    def getNumStarted(self):
        return _genicam.Stream_getNumStarted(self)

    def getPayloadSize(self):
        return _genicam.Stream_getPayloadSize(self)

    def getIsGrabbing(self):
        return _genicam.Stream_getIsGrabbing(self)

    def getDefinesPayloadsize(self):
        return _genicam.Stream_getDefinesPayloadsize(self)

    def getTLType(self):
        return _genicam.Stream_getTLType(self)

    def getNumChunksMax(self):
        return _genicam.Stream_getNumChunksMax(self)

    def getBufAnnounceMin(self):
        return _genicam.Stream_getBufAnnounceMin(self)

    def getBufAlignment(self):
        return _genicam.Stream_getBufAlignment(self)

    def getNodeMap(self):
        return _genicam.Stream_getNodeMap(self)

    def getHandle(self):
        return _genicam.Stream_getHandle(self)
Stream_swigregister = _genicam.Stream_swigregister
Stream_swigregister(Stream)

PAYLOAD_TYPE_UNKNOWN = _genicam.PAYLOAD_TYPE_UNKNOWN
PAYLOAD_TYPE_IMAGE = _genicam.PAYLOAD_TYPE_IMAGE
PAYLOAD_TYPE_RAW_DATA = _genicam.PAYLOAD_TYPE_RAW_DATA
PAYLOAD_TYPE_FILE = _genicam.PAYLOAD_TYPE_FILE
PAYLOAD_TYPE_CHUNK_DATA = _genicam.PAYLOAD_TYPE_CHUNK_DATA
PAYLOAD_TYPE_JPEG = _genicam.PAYLOAD_TYPE_JPEG
PAYLOAD_TYPE_JPEG2000 = _genicam.PAYLOAD_TYPE_JPEG2000
PAYLOAD_TYPE_H264 = _genicam.PAYLOAD_TYPE_H264
PAYLOAD_TYPE_CHUNK_ONLY = _genicam.PAYLOAD_TYPE_CHUNK_ONLY
PAYLOAD_TYPE_DEVICE_SPECIFIC = _genicam.PAYLOAD_TYPE_DEVICE_SPECIFIC
PAYLOAD_TYPE_MULTI_PART = _genicam.PAYLOAD_TYPE_MULTI_PART
PAYLOAD_TYPE_CUSTOM_ID = _genicam.PAYLOAD_TYPE_CUSTOM_ID
PIXELFORMAT_NAMESPACE_UNKNOWN = _genicam.PIXELFORMAT_NAMESPACE_UNKNOWN
PIXELFORMAT_NAMESPACE_GEV = _genicam.PIXELFORMAT_NAMESPACE_GEV
PIXELFORMAT_NAMESPACE_IIDC = _genicam.PIXELFORMAT_NAMESPACE_IIDC
PIXELFORMAT_NAMESPACE_PFNC_16BIT = _genicam.PIXELFORMAT_NAMESPACE_PFNC_16BIT
PIXELFORMAT_NAMESPACE_PFNC_32BIT = _genicam.PIXELFORMAT_NAMESPACE_PFNC_32BIT
PIXELFORMAT_NAMESPACE_CUSTOM_ID = _genicam.PIXELFORMAT_NAMESPACE_CUSTOM_ID
class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr

    def __init__(self, gentl, parent):
        this = _genicam.new_Buffer(gentl, parent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setHandle(self, handle):
        return _genicam.Buffer_setHandle(self, handle)

    def getParent(self):
        return _genicam.Buffer_getParent(self)

    def getBase(self):
        return _genicam.Buffer_getBase(self)

    def getSize(self):
        return _genicam.Buffer_getSize(self)

    def getUserPtr(self):
        return _genicam.Buffer_getUserPtr(self)

    def getTimestamp(self):
        return _genicam.Buffer_getTimestamp(self)

    def getNewData(self):
        return _genicam.Buffer_getNewData(self)

    def getIsQueued(self):
        return _genicam.Buffer_getIsQueued(self)

    def getIsAcquiring(self):
        return _genicam.Buffer_getIsAcquiring(self)

    def getIsIncomplete(self):
        return _genicam.Buffer_getIsIncomplete(self)

    def getTLType(self):
        return _genicam.Buffer_getTLType(self)

    def getSizeFilled(self):
        return _genicam.Buffer_getSizeFilled(self)

    def getWidth(self):
        return _genicam.Buffer_getWidth(self)

    def getHeight(self):
        return _genicam.Buffer_getHeight(self)

    def getXOffset(self):
        return _genicam.Buffer_getXOffset(self)

    def getYOffset(self):
        return _genicam.Buffer_getYOffset(self)

    def getXPadding(self):
        return _genicam.Buffer_getXPadding(self)

    def getYPadding(self):
        return _genicam.Buffer_getYPadding(self)

    def getFrameID(self):
        return _genicam.Buffer_getFrameID(self)

    def getImagePresent(self):
        return _genicam.Buffer_getImagePresent(self)

    def getImageOffset(self):
        return _genicam.Buffer_getImageOffset(self)

    def getPayloadType(self):
        return _genicam.Buffer_getPayloadType(self)

    def getPixelFormat(self):
        return _genicam.Buffer_getPixelFormat(self)

    def getPixelFormatNamespace(self):
        return _genicam.Buffer_getPixelFormatNamespace(self)

    def getDeliveredImageHeight(self):
        return _genicam.Buffer_getDeliveredImageHeight(self)

    def getDeliveredChunkPayloadSize(self):
        return _genicam.Buffer_getDeliveredChunkPayloadSize(self)

    def getChunkLayoutID(self):
        return _genicam.Buffer_getChunkLayoutID(self)

    def getFilename(self):
        return _genicam.Buffer_getFilename(self)

    def isBigEndian(self):
        return _genicam.Buffer_isBigEndian(self)

    def getDataSize(self):
        return _genicam.Buffer_getDataSize(self)

    def getTimestampNS(self):
        return _genicam.Buffer_getTimestampNS(self)

    def getDataLargerThanBuffer(self):
        return _genicam.Buffer_getDataLargerThanBuffer(self)

    def getContainsChunkdata(self):
        return _genicam.Buffer_getContainsChunkdata(self)

    def getHandle(self):
        return _genicam.Buffer_getHandle(self)
    __swig_destroy__ = _genicam.delete_Buffer
    __del__ = lambda self: None
Buffer_swigregister = _genicam.Buffer_swigregister
Buffer_swigregister(Buffer)


def isHostBigEndian():
    return _genicam.isHostBigEndian()
isHostBigEndian = _genicam.isHostBigEndian

def setBoolean(nodemap, name, value, exception=False):
    return _genicam.setBoolean(nodemap, name, value, exception)
setBoolean = _genicam.setBoolean

def setInteger(nodemap, name, value, exception=False):
    return _genicam.setInteger(nodemap, name, value, exception)
setInteger = _genicam.setInteger

def setIPV4Address(nodemap, name, value, exception):
    return _genicam.setIPV4Address(nodemap, name, value, exception)
setIPV4Address = _genicam.setIPV4Address

def setFloat(nodemap, name, value, exception=False):
    return _genicam.setFloat(nodemap, name, value, exception)
setFloat = _genicam.setFloat

def setEnum(nodemap, name, value, exception=False):
    return _genicam.setEnum(nodemap, name, value, exception)
setEnum = _genicam.setEnum

def setString(nodemap, name, value, exception=False):
    return _genicam.setString(nodemap, name, value, exception)
setString = _genicam.setString

def getBoolean(nodemap, name, exception=False, igncache=False):
    return _genicam.getBoolean(nodemap, name, exception, igncache)
getBoolean = _genicam.getBoolean

def getInteger(nodemap, name, vmin=None, vmax=None, exception=False, igncache=False):
    return _genicam.getInteger(nodemap, name, vmin, vmax, exception, igncache)
getInteger = _genicam.getInteger

def getFloat(nodemap, name, vmin=None, vmax=None, exception=False, igncache=False):
    return _genicam.getFloat(nodemap, name, vmin, vmax, exception, igncache)
getFloat = _genicam.getFloat

def getEnum(*args):
    return _genicam.getEnum(*args)
getEnum = _genicam.getEnum

def getString(nodemap, name, exception=False, igncache=False):
    return _genicam.getString(nodemap, name, exception, igncache)
getString = _genicam.getString

def checkFeature(nodemap, name, value, igncache=False):
    return _genicam.checkFeature(nodemap, name, value, igncache)
checkFeature = _genicam.checkFeature

def getChunkAdapter(nodemap, tltype):
    return _genicam.getChunkAdapter(nodemap, tltype)
getChunkAdapter = _genicam.getChunkAdapter

def getNodeJson(nodemap):
    return _genicam.getNodeJson(nodemap)
getNodeJson = _genicam.getNodeJson
PFNC_Mono1p = _genicam.PFNC_Mono1p
PFNC_Mono2p = _genicam.PFNC_Mono2p
PFNC_Mono4p = _genicam.PFNC_Mono4p
PFNC_Mono8 = _genicam.PFNC_Mono8
PFNC_Mono8s = _genicam.PFNC_Mono8s
PFNC_Mono10 = _genicam.PFNC_Mono10
PFNC_Mono10p = _genicam.PFNC_Mono10p
PFNC_Mono12 = _genicam.PFNC_Mono12
PFNC_Mono12p = _genicam.PFNC_Mono12p
PFNC_Mono14 = _genicam.PFNC_Mono14
PFNC_Mono16 = _genicam.PFNC_Mono16
PFNC_BayerBG8 = _genicam.PFNC_BayerBG8
PFNC_BayerBG10 = _genicam.PFNC_BayerBG10
PFNC_BayerBG10p = _genicam.PFNC_BayerBG10p
PFNC_BayerBG12 = _genicam.PFNC_BayerBG12
PFNC_BayerBG12p = _genicam.PFNC_BayerBG12p
PFNC_BayerBG16 = _genicam.PFNC_BayerBG16
PFNC_BayerGB8 = _genicam.PFNC_BayerGB8
PFNC_BayerGB10 = _genicam.PFNC_BayerGB10
PFNC_BayerGB10p = _genicam.PFNC_BayerGB10p
PFNC_BayerGB12 = _genicam.PFNC_BayerGB12
PFNC_BayerGB12p = _genicam.PFNC_BayerGB12p
PFNC_BayerGB16 = _genicam.PFNC_BayerGB16
PFNC_BayerGR8 = _genicam.PFNC_BayerGR8
PFNC_BayerGR10 = _genicam.PFNC_BayerGR10
PFNC_BayerGR10p = _genicam.PFNC_BayerGR10p
PFNC_BayerGR12 = _genicam.PFNC_BayerGR12
PFNC_BayerGR12p = _genicam.PFNC_BayerGR12p
PFNC_BayerGR16 = _genicam.PFNC_BayerGR16
PFNC_BayerRG8 = _genicam.PFNC_BayerRG8
PFNC_BayerRG10 = _genicam.PFNC_BayerRG10
PFNC_BayerRG10p = _genicam.PFNC_BayerRG10p
PFNC_BayerRG12 = _genicam.PFNC_BayerRG12
PFNC_BayerRG12p = _genicam.PFNC_BayerRG12p
PFNC_BayerRG16 = _genicam.PFNC_BayerRG16
PFNC_RGBa8 = _genicam.PFNC_RGBa8
PFNC_RGBa10 = _genicam.PFNC_RGBa10
PFNC_RGBa10p = _genicam.PFNC_RGBa10p
PFNC_RGBa12 = _genicam.PFNC_RGBa12
PFNC_RGBa12p = _genicam.PFNC_RGBa12p
PFNC_RGBa14 = _genicam.PFNC_RGBa14
PFNC_RGBa16 = _genicam.PFNC_RGBa16
PFNC_RGB8 = _genicam.PFNC_RGB8
PFNC_RGB8_Planar = _genicam.PFNC_RGB8_Planar
PFNC_RGB10 = _genicam.PFNC_RGB10
PFNC_RGB10_Planar = _genicam.PFNC_RGB10_Planar
PFNC_RGB10p = _genicam.PFNC_RGB10p
PFNC_RGB10p32 = _genicam.PFNC_RGB10p32
PFNC_RGB12 = _genicam.PFNC_RGB12
PFNC_RGB12_Planar = _genicam.PFNC_RGB12_Planar
PFNC_RGB12p = _genicam.PFNC_RGB12p
PFNC_RGB14 = _genicam.PFNC_RGB14
PFNC_RGB16 = _genicam.PFNC_RGB16
PFNC_RGB16_Planar = _genicam.PFNC_RGB16_Planar
PFNC_RGB565p = _genicam.PFNC_RGB565p
PFNC_BGRa8 = _genicam.PFNC_BGRa8
PFNC_BGRa10 = _genicam.PFNC_BGRa10
PFNC_BGRa10p = _genicam.PFNC_BGRa10p
PFNC_BGRa12 = _genicam.PFNC_BGRa12
PFNC_BGRa12p = _genicam.PFNC_BGRa12p
PFNC_BGRa14 = _genicam.PFNC_BGRa14
PFNC_BGRa16 = _genicam.PFNC_BGRa16
PFNC_BGR8 = _genicam.PFNC_BGR8
PFNC_BGR10 = _genicam.PFNC_BGR10
PFNC_BGR10p = _genicam.PFNC_BGR10p
PFNC_BGR12 = _genicam.PFNC_BGR12
PFNC_BGR12p = _genicam.PFNC_BGR12p
PFNC_BGR14 = _genicam.PFNC_BGR14
PFNC_BGR16 = _genicam.PFNC_BGR16
PFNC_BGR565p = _genicam.PFNC_BGR565p
PFNC_R8 = _genicam.PFNC_R8
PFNC_R10 = _genicam.PFNC_R10
PFNC_R12 = _genicam.PFNC_R12
PFNC_R16 = _genicam.PFNC_R16
PFNC_G8 = _genicam.PFNC_G8
PFNC_G10 = _genicam.PFNC_G10
PFNC_G12 = _genicam.PFNC_G12
PFNC_G16 = _genicam.PFNC_G16
PFNC_B8 = _genicam.PFNC_B8
PFNC_B10 = _genicam.PFNC_B10
PFNC_B12 = _genicam.PFNC_B12
PFNC_B16 = _genicam.PFNC_B16
PFNC_Coord3D_ABC8 = _genicam.PFNC_Coord3D_ABC8
PFNC_Coord3D_ABC8_Planar = _genicam.PFNC_Coord3D_ABC8_Planar
PFNC_Coord3D_ABC10p = _genicam.PFNC_Coord3D_ABC10p
PFNC_Coord3D_ABC10p_Planar = _genicam.PFNC_Coord3D_ABC10p_Planar
PFNC_Coord3D_ABC12p = _genicam.PFNC_Coord3D_ABC12p
PFNC_Coord3D_ABC12p_Planar = _genicam.PFNC_Coord3D_ABC12p_Planar
PFNC_Coord3D_ABC16 = _genicam.PFNC_Coord3D_ABC16
PFNC_Coord3D_ABC16_Planar = _genicam.PFNC_Coord3D_ABC16_Planar
PFNC_Coord3D_ABC32f = _genicam.PFNC_Coord3D_ABC32f
PFNC_Coord3D_ABC32f_Planar = _genicam.PFNC_Coord3D_ABC32f_Planar
PFNC_Coord3D_AC8 = _genicam.PFNC_Coord3D_AC8
PFNC_Coord3D_AC8_Planar = _genicam.PFNC_Coord3D_AC8_Planar
PFNC_Coord3D_AC10p = _genicam.PFNC_Coord3D_AC10p
PFNC_Coord3D_AC10p_Planar = _genicam.PFNC_Coord3D_AC10p_Planar
PFNC_Coord3D_AC12p = _genicam.PFNC_Coord3D_AC12p
PFNC_Coord3D_AC12p_Planar = _genicam.PFNC_Coord3D_AC12p_Planar
PFNC_Coord3D_AC16 = _genicam.PFNC_Coord3D_AC16
PFNC_Coord3D_AC16_Planar = _genicam.PFNC_Coord3D_AC16_Planar
PFNC_Coord3D_AC32f = _genicam.PFNC_Coord3D_AC32f
PFNC_Coord3D_AC32f_Planar = _genicam.PFNC_Coord3D_AC32f_Planar
PFNC_Coord3D_A8 = _genicam.PFNC_Coord3D_A8
PFNC_Coord3D_A10p = _genicam.PFNC_Coord3D_A10p
PFNC_Coord3D_A12p = _genicam.PFNC_Coord3D_A12p
PFNC_Coord3D_A16 = _genicam.PFNC_Coord3D_A16
PFNC_Coord3D_A32f = _genicam.PFNC_Coord3D_A32f
PFNC_Coord3D_B8 = _genicam.PFNC_Coord3D_B8
PFNC_Coord3D_B10p = _genicam.PFNC_Coord3D_B10p
PFNC_Coord3D_B12p = _genicam.PFNC_Coord3D_B12p
PFNC_Coord3D_B16 = _genicam.PFNC_Coord3D_B16
PFNC_Coord3D_B32f = _genicam.PFNC_Coord3D_B32f
PFNC_Coord3D_C8 = _genicam.PFNC_Coord3D_C8
PFNC_Coord3D_C10p = _genicam.PFNC_Coord3D_C10p
PFNC_Coord3D_C12p = _genicam.PFNC_Coord3D_C12p
PFNC_Coord3D_C16 = _genicam.PFNC_Coord3D_C16
PFNC_Coord3D_C32f = _genicam.PFNC_Coord3D_C32f
PFNC_Confidence1 = _genicam.PFNC_Confidence1
PFNC_Confidence1p = _genicam.PFNC_Confidence1p
PFNC_Confidence8 = _genicam.PFNC_Confidence8
PFNC_Confidence16 = _genicam.PFNC_Confidence16
PFNC_Confidence32f = _genicam.PFNC_Confidence32f
PFNC_BiColorBGRG8 = _genicam.PFNC_BiColorBGRG8
PFNC_BiColorBGRG10 = _genicam.PFNC_BiColorBGRG10
PFNC_BiColorBGRG10p = _genicam.PFNC_BiColorBGRG10p
PFNC_BiColorBGRG12 = _genicam.PFNC_BiColorBGRG12
PFNC_BiColorBGRG12p = _genicam.PFNC_BiColorBGRG12p
PFNC_BiColorRGBG8 = _genicam.PFNC_BiColorRGBG8
PFNC_BiColorRGBG10 = _genicam.PFNC_BiColorRGBG10
PFNC_BiColorRGBG10p = _genicam.PFNC_BiColorRGBG10p
PFNC_BiColorRGBG12 = _genicam.PFNC_BiColorRGBG12
PFNC_BiColorRGBG12p = _genicam.PFNC_BiColorRGBG12p
PFNC_SCF1WBWG8 = _genicam.PFNC_SCF1WBWG8
PFNC_SCF1WBWG10 = _genicam.PFNC_SCF1WBWG10
PFNC_SCF1WBWG10p = _genicam.PFNC_SCF1WBWG10p
PFNC_SCF1WBWG12 = _genicam.PFNC_SCF1WBWG12
PFNC_SCF1WBWG12p = _genicam.PFNC_SCF1WBWG12p
PFNC_SCF1WBWG14 = _genicam.PFNC_SCF1WBWG14
PFNC_SCF1WBWG16 = _genicam.PFNC_SCF1WBWG16
PFNC_SCF1WGWB8 = _genicam.PFNC_SCF1WGWB8
PFNC_SCF1WGWB10 = _genicam.PFNC_SCF1WGWB10
PFNC_SCF1WGWB10p = _genicam.PFNC_SCF1WGWB10p
PFNC_SCF1WGWB12 = _genicam.PFNC_SCF1WGWB12
PFNC_SCF1WGWB12p = _genicam.PFNC_SCF1WGWB12p
PFNC_SCF1WGWB14 = _genicam.PFNC_SCF1WGWB14
PFNC_SCF1WGWB16 = _genicam.PFNC_SCF1WGWB16
PFNC_SCF1WGWR8 = _genicam.PFNC_SCF1WGWR8
PFNC_SCF1WGWR10 = _genicam.PFNC_SCF1WGWR10
PFNC_SCF1WGWR10p = _genicam.PFNC_SCF1WGWR10p
PFNC_SCF1WGWR12 = _genicam.PFNC_SCF1WGWR12
PFNC_SCF1WGWR12p = _genicam.PFNC_SCF1WGWR12p
PFNC_SCF1WGWR14 = _genicam.PFNC_SCF1WGWR14
PFNC_SCF1WGWR16 = _genicam.PFNC_SCF1WGWR16
PFNC_SCF1WRWG8 = _genicam.PFNC_SCF1WRWG8
PFNC_SCF1WRWG10 = _genicam.PFNC_SCF1WRWG10
PFNC_SCF1WRWG10p = _genicam.PFNC_SCF1WRWG10p
PFNC_SCF1WRWG12 = _genicam.PFNC_SCF1WRWG12
PFNC_SCF1WRWG12p = _genicam.PFNC_SCF1WRWG12p
PFNC_SCF1WRWG14 = _genicam.PFNC_SCF1WRWG14
PFNC_SCF1WRWG16 = _genicam.PFNC_SCF1WRWG16
PFNC_YCbCr8 = _genicam.PFNC_YCbCr8
PFNC_YCbCr8_CbYCr = _genicam.PFNC_YCbCr8_CbYCr
PFNC_YCbCr10_CbYCr = _genicam.PFNC_YCbCr10_CbYCr
PFNC_YCbCr10p_CbYCr = _genicam.PFNC_YCbCr10p_CbYCr
PFNC_YCbCr12_CbYCr = _genicam.PFNC_YCbCr12_CbYCr
PFNC_YCbCr12p_CbYCr = _genicam.PFNC_YCbCr12p_CbYCr
PFNC_YCbCr411_8 = _genicam.PFNC_YCbCr411_8
PFNC_YCbCr411_8_CbYYCrYY = _genicam.PFNC_YCbCr411_8_CbYYCrYY
PFNC_YCbCr422_8 = _genicam.PFNC_YCbCr422_8
PFNC_YCbCr422_8_CbYCrY = _genicam.PFNC_YCbCr422_8_CbYCrY
PFNC_YCbCr422_10 = _genicam.PFNC_YCbCr422_10
PFNC_YCbCr422_10_CbYCrY = _genicam.PFNC_YCbCr422_10_CbYCrY
PFNC_YCbCr422_10p = _genicam.PFNC_YCbCr422_10p
PFNC_YCbCr422_10p_CbYCrY = _genicam.PFNC_YCbCr422_10p_CbYCrY
PFNC_YCbCr422_12 = _genicam.PFNC_YCbCr422_12
PFNC_YCbCr422_12_CbYCrY = _genicam.PFNC_YCbCr422_12_CbYCrY
PFNC_YCbCr422_12p = _genicam.PFNC_YCbCr422_12p
PFNC_YCbCr422_12p_CbYCrY = _genicam.PFNC_YCbCr422_12p_CbYCrY
PFNC_YCbCr601_8_CbYCr = _genicam.PFNC_YCbCr601_8_CbYCr
PFNC_YCbCr601_10_CbYCr = _genicam.PFNC_YCbCr601_10_CbYCr
PFNC_YCbCr601_10p_CbYCr = _genicam.PFNC_YCbCr601_10p_CbYCr
PFNC_YCbCr601_12_CbYCr = _genicam.PFNC_YCbCr601_12_CbYCr
PFNC_YCbCr601_12p_CbYCr = _genicam.PFNC_YCbCr601_12p_CbYCr
PFNC_YCbCr601_411_8_CbYYCrYY = _genicam.PFNC_YCbCr601_411_8_CbYYCrYY
PFNC_YCbCr601_422_8 = _genicam.PFNC_YCbCr601_422_8
PFNC_YCbCr601_422_8_CbYCrY = _genicam.PFNC_YCbCr601_422_8_CbYCrY
PFNC_YCbCr601_422_10 = _genicam.PFNC_YCbCr601_422_10
PFNC_YCbCr601_422_10_CbYCrY = _genicam.PFNC_YCbCr601_422_10_CbYCrY
PFNC_YCbCr601_422_10p = _genicam.PFNC_YCbCr601_422_10p
PFNC_YCbCr601_422_10p_CbYCrY = _genicam.PFNC_YCbCr601_422_10p_CbYCrY
PFNC_YCbCr601_422_12 = _genicam.PFNC_YCbCr601_422_12
PFNC_YCbCr601_422_12_CbYCrY = _genicam.PFNC_YCbCr601_422_12_CbYCrY
PFNC_YCbCr601_422_12p = _genicam.PFNC_YCbCr601_422_12p
PFNC_YCbCr601_422_12p_CbYCrY = _genicam.PFNC_YCbCr601_422_12p_CbYCrY
PFNC_YCbCr709_8_CbYCr = _genicam.PFNC_YCbCr709_8_CbYCr
PFNC_YCbCr709_10_CbYCr = _genicam.PFNC_YCbCr709_10_CbYCr
PFNC_YCbCr709_10p_CbYCr = _genicam.PFNC_YCbCr709_10p_CbYCr
PFNC_YCbCr709_12_CbYCr = _genicam.PFNC_YCbCr709_12_CbYCr
PFNC_YCbCr709_12p_CbYCr = _genicam.PFNC_YCbCr709_12p_CbYCr
PFNC_YCbCr709_411_8_CbYYCrYY = _genicam.PFNC_YCbCr709_411_8_CbYYCrYY
PFNC_YCbCr709_422_8 = _genicam.PFNC_YCbCr709_422_8
PFNC_YCbCr709_422_8_CbYCrY = _genicam.PFNC_YCbCr709_422_8_CbYCrY
PFNC_YCbCr709_422_10 = _genicam.PFNC_YCbCr709_422_10
PFNC_YCbCr709_422_10_CbYCrY = _genicam.PFNC_YCbCr709_422_10_CbYCrY
PFNC_YCbCr709_422_10p = _genicam.PFNC_YCbCr709_422_10p
PFNC_YCbCr709_422_10p_CbYCrY = _genicam.PFNC_YCbCr709_422_10p_CbYCrY
PFNC_YCbCr709_422_12 = _genicam.PFNC_YCbCr709_422_12
PFNC_YCbCr709_422_12_CbYCrY = _genicam.PFNC_YCbCr709_422_12_CbYCrY
PFNC_YCbCr709_422_12p = _genicam.PFNC_YCbCr709_422_12p
PFNC_YCbCr709_422_12p_CbYCrY = _genicam.PFNC_YCbCr709_422_12p_CbYCrY
PFNC_YCbCr2020_8_CbYCr = _genicam.PFNC_YCbCr2020_8_CbYCr
PFNC_YCbCr2020_10_CbYCr = _genicam.PFNC_YCbCr2020_10_CbYCr
PFNC_YCbCr2020_10p_CbYCr = _genicam.PFNC_YCbCr2020_10p_CbYCr
PFNC_YCbCr2020_12_CbYCr = _genicam.PFNC_YCbCr2020_12_CbYCr
PFNC_YCbCr2020_12p_CbYCr = _genicam.PFNC_YCbCr2020_12p_CbYCr
PFNC_YCbCr2020_411_8_CbYYCrYY = _genicam.PFNC_YCbCr2020_411_8_CbYYCrYY
PFNC_YCbCr2020_422_8 = _genicam.PFNC_YCbCr2020_422_8
PFNC_YCbCr2020_422_8_CbYCrY = _genicam.PFNC_YCbCr2020_422_8_CbYCrY
PFNC_YCbCr2020_422_10 = _genicam.PFNC_YCbCr2020_422_10
PFNC_YCbCr2020_422_10_CbYCrY = _genicam.PFNC_YCbCr2020_422_10_CbYCrY
PFNC_YCbCr2020_422_10p = _genicam.PFNC_YCbCr2020_422_10p
PFNC_YCbCr2020_422_10p_CbYCrY = _genicam.PFNC_YCbCr2020_422_10p_CbYCrY
PFNC_YCbCr2020_422_12 = _genicam.PFNC_YCbCr2020_422_12
PFNC_YCbCr2020_422_12_CbYCrY = _genicam.PFNC_YCbCr2020_422_12_CbYCrY
PFNC_YCbCr2020_422_12p = _genicam.PFNC_YCbCr2020_422_12p
PFNC_YCbCr2020_422_12p_CbYCrY = _genicam.PFNC_YCbCr2020_422_12p_CbYCrY
PFNC_YUV8_UYV = _genicam.PFNC_YUV8_UYV
PFNC_YUV411_8_UYYVYY = _genicam.PFNC_YUV411_8_UYYVYY
PFNC_YUV422_8 = _genicam.PFNC_YUV422_8
PFNC_YUV422_8_UYVY = _genicam.PFNC_YUV422_8_UYVY
GVSP_Mono10Packed = _genicam.GVSP_Mono10Packed
GVSP_Mono12Packed = _genicam.GVSP_Mono12Packed
GVSP_BayerBG10Packed = _genicam.GVSP_BayerBG10Packed
GVSP_BayerBG12Packed = _genicam.GVSP_BayerBG12Packed
GVSP_BayerGB10Packed = _genicam.GVSP_BayerGB10Packed
GVSP_BayerGB12Packed = _genicam.GVSP_BayerGB12Packed
GVSP_BayerGR10Packed = _genicam.GVSP_BayerGR10Packed
GVSP_BayerGR12Packed = _genicam.GVSP_BayerGR12Packed
GVSP_BayerRG10Packed = _genicam.GVSP_BayerRG10Packed
GVSP_BayerRG12Packed = _genicam.GVSP_BayerRG12Packed
GVSP_RGB10V1Packed = _genicam.GVSP_RGB10V1Packed
GVSP_RGB12V1Packed = _genicam.GVSP_RGB12V1Packed
Mono1p = _genicam.Mono1p
Mono2p = _genicam.Mono2p
Mono4p = _genicam.Mono4p
Mono8 = _genicam.Mono8
Mono8s = _genicam.Mono8s
Mono10 = _genicam.Mono10
Mono10p = _genicam.Mono10p
Mono12 = _genicam.Mono12
Mono12p = _genicam.Mono12p
Mono14 = _genicam.Mono14
Mono16 = _genicam.Mono16
BayerBG8 = _genicam.BayerBG8
BayerBG10 = _genicam.BayerBG10
BayerBG10p = _genicam.BayerBG10p
BayerBG12 = _genicam.BayerBG12
BayerBG12p = _genicam.BayerBG12p
BayerBG16 = _genicam.BayerBG16
BayerGB8 = _genicam.BayerGB8
BayerGB10 = _genicam.BayerGB10
BayerGB10p = _genicam.BayerGB10p
BayerGB12 = _genicam.BayerGB12
BayerGB12p = _genicam.BayerGB12p
BayerGB16 = _genicam.BayerGB16
BayerGR8 = _genicam.BayerGR8
BayerGR10 = _genicam.BayerGR10
BayerGR10p = _genicam.BayerGR10p
BayerGR12 = _genicam.BayerGR12
BayerGR12p = _genicam.BayerGR12p
BayerGR16 = _genicam.BayerGR16
BayerRG8 = _genicam.BayerRG8
BayerRG10 = _genicam.BayerRG10
BayerRG10p = _genicam.BayerRG10p
BayerRG12 = _genicam.BayerRG12
BayerRG12p = _genicam.BayerRG12p
BayerRG16 = _genicam.BayerRG16
RGBa8 = _genicam.RGBa8
RGBa10 = _genicam.RGBa10
RGBa10p = _genicam.RGBa10p
RGBa12 = _genicam.RGBa12
RGBa12p = _genicam.RGBa12p
RGBa14 = _genicam.RGBa14
RGBa16 = _genicam.RGBa16
RGB8 = _genicam.RGB8
RGB8_Planar = _genicam.RGB8_Planar
RGB10 = _genicam.RGB10
RGB10_Planar = _genicam.RGB10_Planar
RGB10p = _genicam.RGB10p
RGB10p32 = _genicam.RGB10p32
RGB12 = _genicam.RGB12
RGB12_Planar = _genicam.RGB12_Planar
RGB12p = _genicam.RGB12p
RGB14 = _genicam.RGB14
RGB16 = _genicam.RGB16
RGB16_Planar = _genicam.RGB16_Planar
RGB565p = _genicam.RGB565p
BGRa8 = _genicam.BGRa8
BGRa10 = _genicam.BGRa10
BGRa10p = _genicam.BGRa10p
BGRa12 = _genicam.BGRa12
BGRa12p = _genicam.BGRa12p
BGRa14 = _genicam.BGRa14
BGRa16 = _genicam.BGRa16
BGR8 = _genicam.BGR8
BGR10 = _genicam.BGR10
BGR10p = _genicam.BGR10p
BGR12 = _genicam.BGR12
BGR12p = _genicam.BGR12p
BGR14 = _genicam.BGR14
BGR16 = _genicam.BGR16
BGR565p = _genicam.BGR565p
R8 = _genicam.R8
R10 = _genicam.R10
R12 = _genicam.R12
R16 = _genicam.R16
G8 = _genicam.G8
G10 = _genicam.G10
G12 = _genicam.G12
G16 = _genicam.G16
B8 = _genicam.B8
B10 = _genicam.B10
B12 = _genicam.B12
B16 = _genicam.B16
Coord3D_ABC8 = _genicam.Coord3D_ABC8
Coord3D_ABC8_Planar = _genicam.Coord3D_ABC8_Planar
Coord3D_ABC10p = _genicam.Coord3D_ABC10p
Coord3D_ABC10p_Planar = _genicam.Coord3D_ABC10p_Planar
Coord3D_ABC12p = _genicam.Coord3D_ABC12p
Coord3D_ABC12p_Planar = _genicam.Coord3D_ABC12p_Planar
Coord3D_ABC16 = _genicam.Coord3D_ABC16
Coord3D_ABC16_Planar = _genicam.Coord3D_ABC16_Planar
Coord3D_ABC32f = _genicam.Coord3D_ABC32f
Coord3D_ABC32f_Planar = _genicam.Coord3D_ABC32f_Planar
Coord3D_AC8 = _genicam.Coord3D_AC8
Coord3D_AC8_Planar = _genicam.Coord3D_AC8_Planar
Coord3D_AC10p = _genicam.Coord3D_AC10p
Coord3D_AC10p_Planar = _genicam.Coord3D_AC10p_Planar
Coord3D_AC12p = _genicam.Coord3D_AC12p
Coord3D_AC12p_Planar = _genicam.Coord3D_AC12p_Planar
Coord3D_AC16 = _genicam.Coord3D_AC16
Coord3D_AC16_Planar = _genicam.Coord3D_AC16_Planar
Coord3D_AC32f = _genicam.Coord3D_AC32f
Coord3D_AC32f_Planar = _genicam.Coord3D_AC32f_Planar
Coord3D_A8 = _genicam.Coord3D_A8
Coord3D_A10p = _genicam.Coord3D_A10p
Coord3D_A12p = _genicam.Coord3D_A12p
Coord3D_A16 = _genicam.Coord3D_A16
Coord3D_A32f = _genicam.Coord3D_A32f
Coord3D_B8 = _genicam.Coord3D_B8
Coord3D_B10p = _genicam.Coord3D_B10p
Coord3D_B12p = _genicam.Coord3D_B12p
Coord3D_B16 = _genicam.Coord3D_B16
Coord3D_B32f = _genicam.Coord3D_B32f
Coord3D_C8 = _genicam.Coord3D_C8
Coord3D_C10p = _genicam.Coord3D_C10p
Coord3D_C12p = _genicam.Coord3D_C12p
Coord3D_C16 = _genicam.Coord3D_C16
Coord3D_C32f = _genicam.Coord3D_C32f
Confidence1 = _genicam.Confidence1
Confidence1p = _genicam.Confidence1p
Confidence8 = _genicam.Confidence8
Confidence16 = _genicam.Confidence16
Confidence32f = _genicam.Confidence32f
BiColorBGRG8 = _genicam.BiColorBGRG8
BiColorBGRG10 = _genicam.BiColorBGRG10
BiColorBGRG10p = _genicam.BiColorBGRG10p
BiColorBGRG12 = _genicam.BiColorBGRG12
BiColorBGRG12p = _genicam.BiColorBGRG12p
BiColorRGBG8 = _genicam.BiColorRGBG8
BiColorRGBG10 = _genicam.BiColorRGBG10
BiColorRGBG10p = _genicam.BiColorRGBG10p
BiColorRGBG12 = _genicam.BiColorRGBG12
BiColorRGBG12p = _genicam.BiColorRGBG12p
SCF1WBWG8 = _genicam.SCF1WBWG8
SCF1WBWG10 = _genicam.SCF1WBWG10
SCF1WBWG10p = _genicam.SCF1WBWG10p
SCF1WBWG12 = _genicam.SCF1WBWG12
SCF1WBWG12p = _genicam.SCF1WBWG12p
SCF1WBWG14 = _genicam.SCF1WBWG14
SCF1WBWG16 = _genicam.SCF1WBWG16
SCF1WGWB8 = _genicam.SCF1WGWB8
SCF1WGWB10 = _genicam.SCF1WGWB10
SCF1WGWB10p = _genicam.SCF1WGWB10p
SCF1WGWB12 = _genicam.SCF1WGWB12
SCF1WGWB12p = _genicam.SCF1WGWB12p
SCF1WGWB14 = _genicam.SCF1WGWB14
SCF1WGWB16 = _genicam.SCF1WGWB16
SCF1WGWR8 = _genicam.SCF1WGWR8
SCF1WGWR10 = _genicam.SCF1WGWR10
SCF1WGWR10p = _genicam.SCF1WGWR10p
SCF1WGWR12 = _genicam.SCF1WGWR12
SCF1WGWR12p = _genicam.SCF1WGWR12p
SCF1WGWR14 = _genicam.SCF1WGWR14
SCF1WGWR16 = _genicam.SCF1WGWR16
SCF1WRWG8 = _genicam.SCF1WRWG8
SCF1WRWG10 = _genicam.SCF1WRWG10
SCF1WRWG10p = _genicam.SCF1WRWG10p
SCF1WRWG12 = _genicam.SCF1WRWG12
SCF1WRWG12p = _genicam.SCF1WRWG12p
SCF1WRWG14 = _genicam.SCF1WRWG14
SCF1WRWG16 = _genicam.SCF1WRWG16
YCbCr8 = _genicam.YCbCr8
YCbCr8_CbYCr = _genicam.YCbCr8_CbYCr
YCbCr10_CbYCr = _genicam.YCbCr10_CbYCr
YCbCr10p_CbYCr = _genicam.YCbCr10p_CbYCr
YCbCr12_CbYCr = _genicam.YCbCr12_CbYCr
YCbCr12p_CbYCr = _genicam.YCbCr12p_CbYCr
YCbCr411_8 = _genicam.YCbCr411_8
YCbCr411_8_CbYYCrYY = _genicam.YCbCr411_8_CbYYCrYY
YCbCr422_8 = _genicam.YCbCr422_8
YCbCr422_8_CbYCrY = _genicam.YCbCr422_8_CbYCrY
YCbCr422_10 = _genicam.YCbCr422_10
YCbCr422_10_CbYCrY = _genicam.YCbCr422_10_CbYCrY
YCbCr422_10p = _genicam.YCbCr422_10p
YCbCr422_10p_CbYCrY = _genicam.YCbCr422_10p_CbYCrY
YCbCr422_12 = _genicam.YCbCr422_12
YCbCr422_12_CbYCrY = _genicam.YCbCr422_12_CbYCrY
YCbCr422_12p = _genicam.YCbCr422_12p
YCbCr422_12p_CbYCrY = _genicam.YCbCr422_12p_CbYCrY
YCbCr601_8_CbYCr = _genicam.YCbCr601_8_CbYCr
YCbCr601_10_CbYCr = _genicam.YCbCr601_10_CbYCr
YCbCr601_10p_CbYCr = _genicam.YCbCr601_10p_CbYCr
YCbCr601_12_CbYCr = _genicam.YCbCr601_12_CbYCr
YCbCr601_12p_CbYCr = _genicam.YCbCr601_12p_CbYCr
YCbCr601_411_8_CbYYCrYY = _genicam.YCbCr601_411_8_CbYYCrYY
YCbCr601_422_8 = _genicam.YCbCr601_422_8
YCbCr601_422_8_CbYCrY = _genicam.YCbCr601_422_8_CbYCrY
YCbCr601_422_10 = _genicam.YCbCr601_422_10
YCbCr601_422_10_CbYCrY = _genicam.YCbCr601_422_10_CbYCrY
YCbCr601_422_10p = _genicam.YCbCr601_422_10p
YCbCr601_422_10p_CbYCrY = _genicam.YCbCr601_422_10p_CbYCrY
YCbCr601_422_12 = _genicam.YCbCr601_422_12
YCbCr601_422_12_CbYCrY = _genicam.YCbCr601_422_12_CbYCrY
YCbCr601_422_12p = _genicam.YCbCr601_422_12p
YCbCr601_422_12p_CbYCrY = _genicam.YCbCr601_422_12p_CbYCrY
YCbCr709_8_CbYCr = _genicam.YCbCr709_8_CbYCr
YCbCr709_10_CbYCr = _genicam.YCbCr709_10_CbYCr
YCbCr709_10p_CbYCr = _genicam.YCbCr709_10p_CbYCr
YCbCr709_12_CbYCr = _genicam.YCbCr709_12_CbYCr
YCbCr709_12p_CbYCr = _genicam.YCbCr709_12p_CbYCr
YCbCr709_411_8_CbYYCrYY = _genicam.YCbCr709_411_8_CbYYCrYY
YCbCr709_422_8 = _genicam.YCbCr709_422_8
YCbCr709_422_8_CbYCrY = _genicam.YCbCr709_422_8_CbYCrY
YCbCr709_422_10 = _genicam.YCbCr709_422_10
YCbCr709_422_10_CbYCrY = _genicam.YCbCr709_422_10_CbYCrY
YCbCr709_422_10p = _genicam.YCbCr709_422_10p
YCbCr709_422_10p_CbYCrY = _genicam.YCbCr709_422_10p_CbYCrY
YCbCr709_422_12 = _genicam.YCbCr709_422_12
YCbCr709_422_12_CbYCrY = _genicam.YCbCr709_422_12_CbYCrY
YCbCr709_422_12p = _genicam.YCbCr709_422_12p
YCbCr709_422_12p_CbYCrY = _genicam.YCbCr709_422_12p_CbYCrY
YCbCr2020_8_CbYCr = _genicam.YCbCr2020_8_CbYCr
YCbCr2020_10_CbYCr = _genicam.YCbCr2020_10_CbYCr
YCbCr2020_10p_CbYCr = _genicam.YCbCr2020_10p_CbYCr
YCbCr2020_12_CbYCr = _genicam.YCbCr2020_12_CbYCr
YCbCr2020_12p_CbYCr = _genicam.YCbCr2020_12p_CbYCr
YCbCr2020_411_8_CbYYCrYY = _genicam.YCbCr2020_411_8_CbYYCrYY
YCbCr2020_422_8 = _genicam.YCbCr2020_422_8
YCbCr2020_422_8_CbYCrY = _genicam.YCbCr2020_422_8_CbYCrY
YCbCr2020_422_10 = _genicam.YCbCr2020_422_10
YCbCr2020_422_10_CbYCrY = _genicam.YCbCr2020_422_10_CbYCrY
YCbCr2020_422_10p = _genicam.YCbCr2020_422_10p
YCbCr2020_422_10p_CbYCrY = _genicam.YCbCr2020_422_10p_CbYCrY
YCbCr2020_422_12 = _genicam.YCbCr2020_422_12
YCbCr2020_422_12_CbYCrY = _genicam.YCbCr2020_422_12_CbYCrY
YCbCr2020_422_12p = _genicam.YCbCr2020_422_12p
YCbCr2020_422_12p_CbYCrY = _genicam.YCbCr2020_422_12p_CbYCrY
YUV8_UYV = _genicam.YUV8_UYV
YUV411_8_UYYVYY = _genicam.YUV411_8_UYYVYY
YUV422_8 = _genicam.YUV422_8
YUV422_8_UYVY = _genicam.YUV422_8_UYVY
Mono10Packed = _genicam.Mono10Packed
Mono12Packed = _genicam.Mono12Packed
BayerBG10Packed = _genicam.BayerBG10Packed
BayerBG12Packed = _genicam.BayerBG12Packed
BayerGB10Packed = _genicam.BayerGB10Packed
BayerGB12Packed = _genicam.BayerGB12Packed
BayerGR10Packed = _genicam.BayerGR10Packed
BayerGR12Packed = _genicam.BayerGR12Packed
BayerRG10Packed = _genicam.BayerRG10Packed
BayerRG12Packed = _genicam.BayerRG12Packed
RGB10V1Packed = _genicam.RGB10V1Packed
RGB12V1Packed = _genicam.RGB12V1Packed
InvalidPixelFormat = _genicam.InvalidPixelFormat
PFNC_CUSTOM = _genicam.PFNC_CUSTOM
PFNC_SINGLE_COMPONENT = _genicam.PFNC_SINGLE_COMPONENT
PFNC_MULTIPLE_COMPONENT = _genicam.PFNC_MULTIPLE_COMPONENT
PFNC_COMPONENT_MASK = _genicam.PFNC_COMPONENT_MASK
PFNC_OCCUPY1BIT = _genicam.PFNC_OCCUPY1BIT
PFNC_OCCUPY2BIT = _genicam.PFNC_OCCUPY2BIT
PFNC_OCCUPY4BIT = _genicam.PFNC_OCCUPY4BIT
PFNC_OCCUPY8BIT = _genicam.PFNC_OCCUPY8BIT
PFNC_OCCUPY10BIT = _genicam.PFNC_OCCUPY10BIT
PFNC_OCCUPY12BIT = _genicam.PFNC_OCCUPY12BIT
PFNC_OCCUPY16BIT = _genicam.PFNC_OCCUPY16BIT
PFNC_OCCUPY24BIT = _genicam.PFNC_OCCUPY24BIT
PFNC_OCCUPY30BIT = _genicam.PFNC_OCCUPY30BIT
PFNC_OCCUPY32BIT = _genicam.PFNC_OCCUPY32BIT
PFNC_OCCUPY36BIT = _genicam.PFNC_OCCUPY36BIT
PFNC_OCCUPY40BIT = _genicam.PFNC_OCCUPY40BIT
PFNC_OCCUPY48BIT = _genicam.PFNC_OCCUPY48BIT
PFNC_OCCUPY64BIT = _genicam.PFNC_OCCUPY64BIT
PFNC_PIXEL_SIZE_MASK = _genicam.PFNC_PIXEL_SIZE_MASK
PFNC_PIXEL_SIZE_SHIFT = _genicam.PFNC_PIXEL_SIZE_SHIFT
PFNC_PIXEL_ID_MASK = _genicam.PFNC_PIXEL_ID_MASK
# This file is compatible with both classic and new-style classes.


